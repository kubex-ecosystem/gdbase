name: Kubex Go Dist CI

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      manifest_path:
        description: "Path to the module manifest (e.g., internal/module/info/manifest.json)"
        required: false
        default: "internal/module/info/manifest.json"
        type: string
      run_tests:
        description: "Run unit tests (race) before security/build"
        required: false
        default: true
        type: boolean
      run_security:
        description: "Run security checks before build"
        required: false
        default: false
        type: boolean
      tag_name:
        description: "Tag name for manual release (e.g., v1.0.0)"
        required: false
        type: string
      debug:
        description: "Enable/Disable debug mode"
        required: false
        default: false
        type: boolean
      quiet:
        description: "Enable/Disable quiet mode"
        required: false
        default: true
        type: boolean
      dry_run:
        description: "Enable/Disable dry run mode"
        required: false
        default: false
        type: boolean
      go-version:
        description: "Override Go version (e.g., 1.25.1)"
        required: false
        default: ""
        type: string
      platforms:
        description: "Override platforms (comma-separated, e.g., linux/amd64,windows/amd64)"
        required: false
        default: ""
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  MANIFEST_PATH: "${{ github.event.inputs.manifest_path || 'internal/module/info/manifest.json' }}"
  GO_VERSION: "${{ github.event.inputs.go-version }}"
  NON_INTERACTIVE: true
  FORCE: y
  QUIET: true
  CI: true

jobs:
  # ==========================================
  # JOB 1: Tests (Optional)
  # ==========================================
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      go-version: ${{ steps.go-setup.outputs.go-version }}
      module-name: ${{ steps.manifest.outputs.module-name }}
      manifest-version: ${{ steps.manifest.outputs.manifest-version }}
      module-version: ${{ steps.manifest.outputs.module-version }}
      platforms: ${{ steps.manifest.outputs.platforms }}
      arch: ${{ steps.manifest.outputs.arch }}
      module-path: ${{ steps.manifest.outputs.module-path }}
      continue: ${{ steps.run-tests.outputs.continue }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Load Module Manifest
        id: manifest
        run: |
          if [[ ! -f "$(git rev-parse --show-toplevel)/${MANIFEST_PATH:-}" ]]; then
            echo "❌ ${MANIFEST_PATH:-} not found"
            exit 1
          fi

          # Extract module information
          GO_VERSION="${{ github.event.inputs.go-version }}"
          if [[ -z "$GO_VERSION" ]]; then
            GO_VERSION=$(cat $(git rev-parse --show-toplevel)/${MANIFEST_PATH:-} | jq -r '.go_version // ""')
          fi
          if [[ -z "$GO_VERSION" ]]; then
            GO_VERSION=$(grep '^go ' $(git rev-parse --show-toplevel)/go.mod | awk '{print $2}')
            # Check if go.mod extraction brings a version with minor version
            if [[ ! "$GO_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Check if it has at least major.minor
              if [[ "$GO_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
                echo "⚠️  go.mod Go version '$GO_VERSION' is missing patch version, defaulting to .1"
                GO_VERSION="${GO_VERSION}.1"
              else
                echo "❌ Unable to determine Go version from go.mod"
                exit 1
              fi
              GO_VERSION="${GO_VERSION%.*}.1"
            fi
          fi

          if [[ -z "$GO_VERSION" ]]; then
            echo "❌ Go version not specified in inputs, manifest, or go.mod"
            exit 1
          fi

          # Output for other jobs
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT

          MODULE_NAME=$(cat $(git rev-parse --show-toplevel)/${MANIFEST_PATH:-} | jq -r '.bin // .name // "unknown"')
          MODULE_VERSION=$(cat $(git rev-parse --show-toplevel)/${MANIFEST_PATH:-} | jq -r '.version // "0.0.0"')
          PLATFORMS=$(cat $(git rev-parse --show-toplevel)/${MANIFEST_PATH:-} | jq -r '.platforms[]?' | tr '\n' ' ' | sed 's/ $//')
          # Validate required fields
          if [[ "$MODULE_NAME" == "unknown" || "$MODULE_NAME" == "null" ]]; then
            echo "❌ Module name not found in manifest (bin or name field required)"
            exit 1
          fi

          if [[ -z "$PLATFORMS" ]]; then
            echo "❌ No platforms specified in manifest"
            exit 1
          fi

          echo "module-name=$MODULE_NAME" >> $GITHUB_OUTPUT
          echo "manifest-version=$MODULE_VERSION" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT
          echo "module-version=${MODULE_VERSION#v}" >> $GITHUB_OUTPUT
          echo "arch=$(echo $PLATFORMS | tr ' ' '\n' | cut -d'/' -f2 | sort -u | tr '\n' ' ' | sed 's/ $//')" >> $GITHUB_OUTPUT
          echo "module-path=$(githubusercontent.com/${{ github.repository }})" >> $GITHUB_OUTPUT

          echo "✅ Module: $MODULE_NAME"
          echo "✅ Manifest Version: $MODULE_VERSION"
          echo "✅ Platforms: $PLATFORMS"
          echo "✅ Go Version: $GO_VERSION"

      - name: Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag_name }}" ]]; then
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Smart Go Setup
        id: go-setup
        run: |
          GO_VERSION="${{ steps.manifest.outputs.go-version }}"

          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/kubex-ecosystem/gosetup/main/go.sh')" -s install "${GO_VERSION:-latest}"

          if [ -f /home/runner/.profile ]; then
            source /home/runner/.profile
          fi

          if [ -f /home/runner/.bashrc ]; then
            source /home/runner/.bashrc
          elif [ -f /home/runner/.zshrc ]; then
            source /home/runner/.zshrc
          fi

          # Verify installation
          go version | grep -q "${GO_VERSION}" || {
            echo "❌ Installed Go version ($(go version)) does not match expected version: $GO_VERSION"
            exit 1
          }

          echo "✅ Go version $GO_VERSION installed successfully."

      - name: Restore Go Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-gomod-

      - name: Verify Go Modules
        run: |
          go mod tidy
          echo "✅ go.mod tidied."

          go mod verify
          echo "✅ Go modules verified."

          git diff --exit-code go.mod go.sum
          echo "✅ go.mod and go.sum are clean."

      - name: Run Tests
        id: run-tests
        if: always() && ${{ github.event.inputs.run_tests }}
        run: |
          go test -v ./... || {
            echo "❌ Tests failed."
            exit 1
          }
          echo "✅ Tests completed."
          echo "✅ Go version: $(go version)"
          echo "✅ All checks passed."

          echo "continue=true" >> $GITHUB_OUTPUT

      - name: Mark continue when skipping tests
        if: always() && ${{ inputs.run_tests != true }}
        run: echo "continue=true" >> $GITHUB_OUTPUT

  # ==========================================
  # JOB 2: Security Scan (Optional)
  # ==========================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    outputs:
      version-mismatch: ${{ steps.version-check.outputs.version-mismatch }}
      continue: ${{ steps.version-check.outputs.continue }}
    needs: tests
    if: always() && github.event_name != 'workflow_dispatch' && needs.tests.outputs.continue == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Validate Tag Format
        run: |
          VERSION="${{ needs.tests.outputs.version }}"
          echo "🔍 Validating tag format: $VERSION"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z (e.g., v1.2.3)"
            exit 1
          fi
          echo "✅ Valid version: $VERSION"

      - name: Version Compatibility Check
        id: version-check
        run: |
          TAG_VERSION="${{ needs.tests.outputs.version }}"
          MANIFEST_VERSION="v${{ needs.tests.outputs.manifest-version }}"

          # Remove 'v' prefix for comparison
          TAG_CLEAN="${TAG_VERSION#v}"
          MANIFEST_CLEAN="${MANIFEST_VERSION#v}"

          echo "🏷️  Tag Version: $TAG_VERSION ($TAG_CLEAN)"
          echo "📋 Manifest Version: $MANIFEST_VERSION ($MANIFEST_CLEAN)"

          if [[ "$TAG_CLEAN" != "$MANIFEST_CLEAN" ]]; then
            echo ""
            echo "❌ Version Mismatch!"
            echo "   Git Tag: $TAG_VERSION"
            echo "   Manifest: $MANIFEST_VERSION"
            echo ""
            echo "Please update ${MANIFEST_PATH:-} version to match the git tag."
            echo "Expected: \"version\": \"$TAG_CLEAN\""
            echo ""
            echo "🛑 Workflow will skip remaining steps for safety."
            echo "version-mismatch=true" >> $GITHUB_OUTPUT
            echo "continue=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version compatibility confirmed: $TAG_VERSION"
            echo "version-mismatch=false" >> $GITHUB_OUTPUT
            echo "continue=true" >> $GITHUB_OUTPUT
          fi

      - name: Smart Go Setup
        if: always() && steps.version-check.outputs.continue == 'true' && github.event.inputs.run_security == true
        run: |
          GO_VERSION=${{ needs.tests.outputs.go-version }}

          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/kubex-ecosystem/gosetup/main/go.sh')" -s install "${GO_VERSION:-latest}"

          # Verify installation
          go version

      - name: Restore Go Cache
        uses: actions/cache@v4
        if: always() && steps.version-check.outputs.continue == 'true' && github.event.inputs.run_security == true
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-gomod-

      - name: Run Gosec Security Scanner
        if: always() && steps.version-check.outputs.continue == 'true' && github.event.inputs.run_security == true
        run: |
          go env -w GOTOOLCHAIN=go${{ needs.tests.outputs.go-version }}
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt sarif -out "${{ github.workspace }}/dist/gosec.sarif" ./...

      - name: Upload SARIF file
        if: always() && steps.version-check.outputs.continue == 'true' && github.event.inputs.run_security == true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ github.workspace }}/dist/gosec.sarif"
          checkout_path: ${{ github.workspace }}
          category: "gosec"
          matrix: "go"

      # Mark continue if skipping security
      - name: Mark continue when skipping security
        if: always() && ${{ inputs.run_security != true }}
        run: echo "continue=true" >> $GITHUB_OUTPUT

  # ==========================================
  # JOB 3: Build All Platforms
  # ==========================================
  build:
    name: Cross-Platform Build
    runs-on: ubuntu-latest
    needs: [tests, security]
    if: always() && (github.event_name == 'workflow_dispatch' || needs.security.outputs.continue == 'true')
    outputs:
      version: ${{ steps.verify.outputs.VERSION }}
      module-name: ${{ steps.verify.outputs.MODULE_NAME }}
      platforms: ${{ steps.verify.outputs.PLATFORMS }}
      go-version: ${{ steps.go-setup.outputs.go-version }}
      continue: ${{ steps.verify.outputs.continue }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Smart Go Setup
        shell: bash
        id: go-setup
        run: |
          GO_VERSION="${{ needs.tests.outputs.go-version }}"

          bash -c "$(curl -sSfL 'https://raw.githubusercontent.com/kubex-ecosystem/gosetup/main/go.sh')" -s install "${GO_VERSION:-latest}"

          # Verify installation
          go version || exit 1

          # Output for other jobs
          echo "go-version=$GO_VERSION" >> $GITHUB_OUTPUT

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-gomod-

      - name: Cross-Platform Build
        shell: bash
        run: |
          MODULE_NAME="${{ needs.tests.outputs.module-name }}"
          export NON_INTERACTIVE=${NON_INTERACTIVE:-${{ github.env.NON_INTERACTIVE }}} &&\
          export FORCE=${FORCE:-${{ github.env.FORCE }}} &&\
          export CI=${CI:-${{ github.env.CI }}} &&\
          export DRY_RUN=${DRY_RUN:-${{ github.event.inputs.dry_run }}} &&\
          export DEBUG=${DEBUG:-${{ github.event.inputs.debug }}} &&\
          export QUIET=${QUIET:-${{ github.event.inputs.quiet }}} &&\
          export GO_VERSION_CHECK=false &&\
          make build all &&\
          _EXPORT_CMD=( $(ls -1 dist/"${MODULE_NAME:-}"_*) ) &&\
          echo "export ARTIFACT_LIST='${_EXPORT_CMD[*]}'" >> $GITHUB_ENV
          echo "✅ Build completed."

      - name: Verify Build Artifacts
        shell: bash
        id: verify
        run: |
          MODULE_NAME="${{ needs.tests.outputs.module-name }}"
          PLATFORMS="${{ needs.tests.outputs.platforms }}"
          ARTIFACT_LIST=( ${ARTIFACT_LIST:-} )
          ARTIFACTS_DIR="dist"

          echo "VERSION=${{ needs.tests.outputs.version }}" >> $GITHUB_OUTPUT
          echo "ARTIFACT_LIST=${ARTIFACT_LIST[*]}" >> $GITHUB_OUTPUT
          echo "ARTIFACT_COUNT=${#ARTIFACT_LIST[@]}" >> $GITHUB_OUTPUT
          echo "ARTIFACTS_DIR=${ARTIFACTS_DIR}" >> $GITHUB_OUTPUT
          echo "PLATFORMS=${PLATFORMS}" >> $GITHUB_OUTPUT

          # Generate SHA256SUMS files
          if [[ ! -f ${ARTIFACTS_DIR}/SHA256SUMS ]]; then
            mkdir -p ${ARTIFACTS_DIR} && touch ${ARTIFACTS_DIR}/SHA256SUMS
          fi

          cd ${ARTIFACTS_DIR} || exit 1
          sha256sum ./* > SHA256SUMS || exit 1
          cd - || exit 1

          # Verify each artifact
          echo "✅ All artifacts verified successfully."

          echo "📂 Listing artifacts directory:"
          ls -lh ${ARTIFACTS_DIR}/${MODULE_NAME}_*

          echo "✅ All artifacts verified successfully."

          # Create checksums.txt if not exists with all checksums and filenames
          if [[ ! -f ${ARTIFACTS_DIR}/checksums.txt ]]; then
            echo "Creating checksums.txt..."
            touch ${ARTIFACTS_DIR}/checksums.txt
            sha256sum ${ARTIFACTS_DIR}/${MODULE_NAME}_* > ${ARTIFACTS_DIR}/checksums.txt
            echo "✅ checksums.txt created."
          fi

          # mark the build as successful for downstream jobs
          echo "continue=true" >> $GITHUB_OUTPUT

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: always() && steps.verify.outputs.continue == 'true'
        with:
          name: ${{ needs.tests.outputs.module-name }}-release-binaries
          path: |
            dist/${{ needs.tests.outputs.module-name }}_*
            dist/checksums.txt
          # Retain artifacts for 7 days
          retention-days: 7
          if-no-files-found: error
          compression-level: 6
          overwrite: true
          include-hidden-files: false

      - name: Continue if build successful
        if: always() && steps.verify.outputs.continue == 'true'
        run: echo "continue=true" >> $GITHUB_OUTPUT

  # ==========================================
  # JOB 4: Create GitHub Release
  # ==========================================
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [tests, build]
    if: always() && needs.build.result == 'success' && needs.build.outputs.continue == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.tests.outputs.module-name }}-release-binaries
          path: ./release-assets

      - name: Generate Release Notes
        shell: bash
        run: |
          MODULE_NAME="${{ needs.tests.outputs.module-name }}"
          VERSION="${{ needs.tests.outputs.version }}"
          PLATFORMS="${{ needs.tests.outputs.platforms }}"
          # Convert platforms to readable format
          PLATFORM_LIST=""
          for platform in $PLATFORMS; do
            if [[ "$platform" == *"/"* ]]; then
              OS=$(echo "$platform" | cut -d'/' -f1)
              ARCH=$(echo "$platform" | cut -d'/' -f2)
            elif [[ "$platform" == *"-"* ]]; then
              OS=$(echo "$platform" | cut -d'-' -f1)
              ARCH=$(echo "$platform" | cut -d'-' -f2)
            else
              echo "❌ Invalid platform format: $platform (expected: os/arch or os-arch)"
              continue
            fi
            # Add platform-specific information
            case "$platform" in
              "linux/amd64"|"linux-amd64") PLATFORM_LIST="$PLATFORM_LIST          - 🐧 **Linux (AMD64)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
              "linux/arm64"|"linux-arm64") PLATFORM_LIST="$PLATFORM_LIST          - 🐧 **Linux (ARM64)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
              "linux/386"|"linux-386") PLATFORM_LIST="$PLATFORM_LIST          - 🐧 **Linux (386)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
              "windows/amd64"|"windows-amd64") PLATFORM_LIST="$PLATFORM_LIST          - 🪟 **Windows (AMD64)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.zip\`" ;;
              "windows/i386"|"windows-i386") PLATFORM_LIST="$PLATFORM_LIST          - 🪟 **Windows (i386)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.zip\`" ;;
              "darwin/amd64"|"darwin-amd64") PLATFORM_LIST="$PLATFORM_LIST          - 🍎 **macOS (AMD64)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
              "darwin/arm64"|"darwin-arm64") PLATFORM_LIST="$PLATFORM_LIST          - 🍎 **macOS (ARM64)**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
              *) PLATFORM_LIST="$PLATFORM_LIST          - 📦 **${platform:-}**: \`${MODULE_NAME:-}_${OS:-}_${ARCH:-}.tar.gz\`" ;;
            esac
          done

          cat > RELEASE_NOTES.md << EOF
          ## ${MODULE_NAME:-} Release ${VERSION:-}

          ### What's Included

          This release contains cross-platform binaries for:
          ${PLATFORM_LIST:-}

          ### Installation

          #### Linux/macOS
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/${MODULE_NAME}_linux_amd64.tar.gz
          tar -xzf ${MODULE_NAME:-}_linux_amd64.tar.gz
          chmod +x ${MODULE_NAME:-}_linux_amd64
          sudo mv ${MODULE_NAME:-}_linux_amd64 /usr/local/bin/${MODULE_NAME:-}
          \`\`\`

          #### Windows
          \`\`\`powershell
          # Download and extract the ZIP file
          # Add the executable to your PATH
          \`\`\`

          ### Verification

          All binaries are compressed and checksums are provided in \`SHA256SUMS\`.

          \`\`\`bash
          # Verify checksum
          sha256sum -c SHA256SUMS
          \`\`\`

          ### Build Information

          - **Go Version**: ${{ needs.tests.outputs.go-version }}
          - **Built on**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${{ github.sha }}
          - **Workflow**: ${{ github.run_id }}

          ---

          **Full Changelog**: [${{ github.repository }}/compare/...](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
          EOF

          echo "✅ Release notes generated."

      - name: Create GitHub Release
        shell: bash
        run: |
          MODULE_NAME="${{ needs.tests.outputs.module-name }}"
          VERSION="${{ needs.tests.outputs.version }}"

          gh release create "${VERSION:-}" \
            ./release-assets/* \
            --title "${MODULE_NAME:-} ${VERSION:-}" \
            --notes-file RELEASE_NOTES.md \
            ${{ contains(needs.tests.outputs.version, '-') && '--prerelease' || '' }}

          echo "✅ Release created successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        shell: bash
        run: |
          MODULE_NAME="${{ needs.tests.outputs.module-name }}"
          PLATFORMS="${{ needs.tests.outputs.platforms }}"

          echo "## Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Module**: ${MODULE_NAME:-}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.tests.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Go Version**: ${{ needs.tests.outputs.go-version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Assets Released:" >> $GITHUB_STEP_SUMMARY

          for platform in $PLATFORMS; do
            case "$platform" in
              "linux/amd64"|"linux-amd64") echo "- 🐧 Linux AMD64" >> $GITHUB_STEP_SUMMARY ;;
              "linux/arm64"|"linux-arm64") echo "- 🐧 Linux ARM64" >> $GITHUB_STEP_SUMMARY ;;
              "linux/386"|"linux-386") echo "- 🐧 Linux 386" >> $GITHUB_STEP_SUMMARY ;;
              "windows/amd64"|"windows-amd64") echo "- 🪟 Windows AMD64" >> $GITHUB_STEP_SUMMARY ;;
              "windows/i386"|"windows-i386") echo "- 🪟 Windows i386" >> $GITHUB_STEP_SUMMARY ;;
              "darwin/amd64"|"darwin-amd64") echo "- 🍎 macOS AMD64" >> $GITHUB_STEP_SUMMARY ;;
              "darwin/arm64"|"darwin-arm64") echo "- 🍎 macOS ARM64" >> $GITHUB_STEP_SUMMARY ;;
              *) echo "- 📦 ${platform}" >> $GITHUB_STEP_SUMMARY ;;
            esac
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Release Notes:" >> $GITHUB_STEP_SUMMARY
          cat $(git rev-parse --show-toplevel)/RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
